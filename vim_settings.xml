<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/taxinfo.php" timestamp="1512564154898">
        <mark key="'" line="279" column="18" />
        <mark key="[" line="2" column="18" />
        <mark key="]" line="2" column="18" />
        <mark key="." line="2" column="18" />
        <mark key="^" line="280" column="18" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Exceptions/Handler.php" timestamp="1512810423050">
        <mark key="[" line="58" column="0" />
        <mark key="]" line="58" column="0" />
        <mark key="^" line="54" column="53" />
        <mark key="." line="58" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/resources/views/layouts/app.blade.php" timestamp="1511286915409">
        <mark key="'" line="59" column="20" />
        <mark key="[" line="75" column="108" />
        <mark key="]" line="76" column="49" />
        <mark key="." line="76" column="49" />
        <mark key="^" line="76" column="49" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/fundingDetail1.php" timestamp="1512924210150">
        <mark key="'" line="7" column="0" />
        <mark key="[" line="5" column="0" />
        <mark key="]" line="623" column="2" />
        <mark key="." line="385" column="55" />
        <mark key="^" line="384" column="78" />
      </file>
      <file name="$USER_HOME$/developements/git/point/.gitignore" timestamp="1510335630603">
        <mark key="[" line="3" column="12" />
        <mark key="]" line="3" column="10" />
        <mark key="." line="3" column="10" />
        <mark key="^" line="3" column="10" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Listeners/ArticlesEventListener.php" timestamp="1511459040810">
        <mark key="'" line="25" column="6" />
        <mark key="[" line="31" column="14" />
        <mark key="]" line="31" column="14" />
        <mark key="." line="31" column="14" />
        <mark key="^" line="31" column="14" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/.env" timestamp="1512906088368">
        <mark key="'" line="25" column="23" />
        <mark key="[" line="25" column="23" />
        <mark key="]" line="25" column="23" />
        <mark key="." line="25" column="23" />
        <mark key="^" line="25" column="23" />
      </file>
      <file name="/a.dummy" timestamp="1511544400113">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/schedule-detail.php" timestamp="1512761433359">
        <mark key="'" line="16" column="0" />
        <mark key="[" line="90" column="0" />
        <mark key="]" line="90" column="31" />
        <mark key="." line="131" column="29" />
        <mark key="^" line="131" column="29" />
      </file>
      <file name="$USER_HOME$/developements/git/point/routes/web.php" timestamp="1510334841784">
        <mark key="'" line="48" column="14" />
        <mark key="[" line="38" column="51" />
        <mark key="]" line="38" column="50" />
        <mark key="." line="38" column="50" />
        <mark key="^" line="38" column="50" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Listeners/UserEventListener.php" timestamp="1511460140363">
        <mark key="[" line="29" column="0" />
        <mark key="]" line="29" column="0" />
        <mark key="^" line="31" column="35" />
        <mark key="." line="29" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/config/app.php" timestamp="1511609903907">
        <mark key="'" line="93" column="27" />
        <mark key="[" line="93" column="26" />
        <mark key="]" line="93" column="27" />
        <mark key="." line="93" column="27" />
        <mark key="^" line="93" column="27" />
      </file>
      <file name="$USER_HOME$/developements/math/resources/views/home.blade.php" timestamp="1513502494000">
        <mark key="'" line="7" column="0" />
        <mark key="[" line="87" column="16" />
        <mark key="]" line="87" column="16" />
        <mark key="." line="87" column="16" />
        <mark key="^" line="87" column="27" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/functions.php" timestamp="1512761762311">
        <mark key="[" line="14" column="99" />
        <mark key="]" line="14" column="100" />
        <mark key="^" line="14" column="108" />
        <mark key="." line="14" column="100" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_22_165024_create_class_rooms_table.php" timestamp="1509160699840">
        <mark key="[" line="23" column="20" />
        <mark key="]" line="23" column="35" />
        <mark key="^" line="23" column="35" />
        <mark key="." line="23" column="35" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Middleware/CheckStudent.php" timestamp="1509127824561">
        <mark key="[" line="19" column="71" />
        <mark key="]" line="19" column="71" />
        <mark key="." line="19" column="71" />
        <mark key="^" line="19" column="70" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Events/ArticleCreated.php" timestamp="1511458515787">
        <mark key="[" line="26" column="33" />
        <mark key="]" line="26" column="33" />
        <mark key="^" line="26" column="33" />
        <mark key="." line="26" column="33" />
      </file>
      <file name="$USER_HOME$/developements/git/point/.env" timestamp="1510334781684">
        <mark key="'" line="17" column="20" />
        <mark key="[" line="24" column="15" />
        <mark key="]" line="24" column="15" />
        <mark key="." line="24" column="15" />
        <mark key="^" line="24" column="15" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/routes/web.php" timestamp="1512906777883">
        <mark key="[" line="66" column="50" />
        <mark key="]" line="69" column="54" />
        <mark key="." line="69" column="54" />
        <mark key="^" line="69" column="54" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/seeds/PointsTableSeeder.php" timestamp="1509130072875">
        <mark key="[" line="14" column="30" />
        <mark key="]" line="14" column="30" />
        <mark key="." line="14" column="30" />
        <mark key="^" line="14" column="30" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/PointFactory.php" timestamp="1509279890213">
        <mark key="[" line="17" column="16" />
        <mark key="]" line="17" column="16" />
        <mark key="^" line="17" column="15" />
        <mark key="." line="17" column="16" />
      </file>
      <file name="$USER_HOME$/developements/math/database/seeds/UsersTableSeeder.php" timestamp="1513501272679">
        <mark key="[" line="29" column="44" />
        <mark key="]" line="29" column="51" />
        <mark key="." line="29" column="51" />
        <mark key="^" line="29" column="51" />
      </file>
      <file name="$USER_HOME$/developements/p2p/app/Http/Controllers/HomeController.php" timestamp="1513450745207">
        <mark key="'" line="46" column="52" />
        <mark key="[" line="89" column="0" />
        <mark key="]" line="89" column="0" />
        <mark key="." line="89" column="0" />
        <mark key="^" line="39" column="34" />
      </file>
      <file name="$USER_HOME$/developements/git/point/composer.json" timestamp="1509122056405">
        <mark key="[" line="60" column="0" />
        <mark key="]" line="60" column="0" />
        <mark key="." line="60" column="0" />
        <mark key="^" line="71" column="7" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/composer.json" timestamp="1512837974009">
        <mark key="[" line="34" column="13" />
        <mark key="]" line="34" column="14" />
        <mark key="^" line="34" column="16" />
        <mark key="." line="34" column="14" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/point/transaction.blade.php" timestamp="1509280236115">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="23" column="7" />
        <mark key="." line="17" column="38" />
        <mark key="^" line="16" column="51" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/Seoul/api/index.php" timestamp="1504422080123">
        <mark key="'" line="47" column="14" />
        <mark key="[" line="34" column="0" />
        <mark key="]" line="34" column="0" />
        <mark key="^" line="46" column="8" />
        <mark key="." line="34" column="0" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/Auth/RegisterController.php" timestamp="1508443782771">
        <mark key="[" line="91" column="0" />
        <mark key="]" line="91" column="43" />
        <mark key="." line="83" column="12" />
        <mark key="^" line="76" column="20" />
      </file>
      <file name="$USER_HOME$/developements/math/database/migrations/2017_12_16_053456_create_transactions_table.php" timestamp="1513419711630">
        <mark key="[" line="27" column="0" />
        <mark key="]" line="27" column="0" />
        <mark key="." line="27" column="0" />
        <mark key="^" line="23" column="11" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_175141_create_posts_table.php" timestamp="1511200353511">
        <mark key="[" line="16" column="37" />
        <mark key="]" line="18" column="32" />
        <mark key="^" line="18" column="32" />
        <mark key="." line="18" column="32" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/routes/web.php" timestamp="1511555011766">
        <mark key="[" line="14" column="36" />
        <mark key="]" line="14" column="33" />
        <mark key="." line="14" column="33" />
        <mark key="^" line="14" column="33" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Middleware/RedirectIfAuthenticated.php" timestamp="1509127386582">
        <mark key="[" line="20" column="30" />
        <mark key="]" line="20" column="38" />
        <mark key="." line="20" column="38" />
        <mark key="^" line="20" column="38" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_181708_create_article_tag_table.php" timestamp="1511201953239">
        <mark key="[" line="18" column="27" />
        <mark key="]" line="20" column="108" />
        <mark key="^" line="20" column="108" />
        <mark key="." line="20" column="108" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_14_032833_create_academies_table.php" timestamp="1509125640309">
        <mark key="[" line="17" column="0" />
        <mark key="]" line="23" column="93" />
        <mark key="^" line="25" column="33" />
        <mark key="." line="25" column="33" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-list.php" timestamp="1512511037552">
        <mark key="'" line="34" column="1" />
        <mark key="[" line="61" column="44" />
        <mark key="]" line="61" column="55" />
        <mark key="." line="61" column="55" />
        <mark key="^" line="61" column="55" />
      </file>
      <file name="$USER_HOME$/developements/p2p/config/app.php" timestamp="1513449726322">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="67" column="21" />
        <mark key="]" line="67" column="21" />
        <mark key="." line="67" column="21" />
        <mark key="^" line="67" column="21" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/resources/views/articles/create.blade.php" timestamp="1511286410901">
        <mark key="'" line="20" column="10" />
        <mark key="[" line="7" column="39" />
        <mark key="]" line="8" column="27" />
        <mark key="^" line="8" column="27" />
        <mark key="." line="8" column="27" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/PointController.php" timestamp="1509160177178">
        <mark key="'" line="8" column="6" />
        <mark key="[" line="59" column="17" />
        <mark key="]" line="59" column="51" />
        <mark key="." line="59" column="51" />
        <mark key="^" line="59" column="51" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/deposit-withdraw.php" timestamp="1512513842199">
        <mark key="[" line="123" column="130" />
        <mark key="]" line="123" column="131" />
        <mark key="." line="123" column="131" />
        <mark key="^" line="123" column="134" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/app/Classes/User.php" timestamp="1512794061907">
        <mark key="'" line="361" column="30" />
        <mark key="[" line="250" column="59" />
        <mark key="]" line="250" column="59" />
        <mark key="." line="250" column="59" />
        <mark key="^" line="250" column="59" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/includes/deposit-list.php" timestamp="1512514146022">
        <mark key="[" line="47" column="35" />
        <mark key="]" line="47" column="39" />
        <mark key="." line="47" column="39" />
        <mark key="^" line="47" column="39" />
      </file>
      <file name="$USER_HOME$/developements/p2p/app/Content.php" timestamp="1513448842925">
        <mark key="[" line="11" column="28" />
        <mark key="]" line="11" column="28" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="18" column="10" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/DashBoardTeacherController.php" timestamp="1510422644383">
        <mark key="'" line="0" column="4" />
        <mark key="[" line="64" column="24" />
        <mark key="]" line="64" column="22" />
        <mark key="." line="64" column="22" />
        <mark key="^" line="64" column="22" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_23_174616_add_last_login_column_on_users_table.php" timestamp="1511459187430">
        <mark key="[" line="15" column="60" />
        <mark key="]" line="17" column="0" />
        <mark key="." line="17" column="0" />
        <mark key="^" line="15" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/resources/views/emails/articles/created.blade.php" timestamp="1512827723827">
        <mark key="[" line="12" column="37" />
        <mark key="]" line="12" column="37" />
        <mark key="." line="12" column="37" />
        <mark key="^" line="12" column="63" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/Seoul/seoul/app/Controller.php" timestamp="1505553455904">
        <mark key="'" line="318" column="247" />
        <mark key="[" line="214" column="8" />
        <mark key="]" line="214" column="7" />
        <mark key="." line="214" column="7" />
        <mark key="^" line="214" column="7" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/helper.php" timestamp="1513999850296">
        <mark key="'" line="285" column="0" />
        <mark key="[" line="12" column="0" />
        <mark key="]" line="13" column="28" />
        <mark key="." line="5" column="0" />
        <mark key="^" line="5" column="19" />
      </file>
      <file name="$USER_HOME$/developements/git/address/index.php" timestamp="1505651124065">
        <mark key="'" line="16" column="0" />
        <mark key="[" line="20" column="0" />
        <mark key="]" line="20" column="0" />
        <mark key="." line="20" column="0" />
        <mark key="^" line="4" column="48" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/seeds/ArticlesTableSeeder.php" timestamp="1511203214760">
        <mark key="[" line="15" column="37" />
        <mark key="]" line="15" column="37" />
        <mark key="." line="15" column="37" />
        <mark key="^" line="15" column="27" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/invitation.blade.php" timestamp="1508868165006">
        <mark key="'" line="63" column="88" />
        <mark key="[" line="105" column="66" />
        <mark key="]" line="110" column="36" />
        <mark key="." line="110" column="36" />
        <mark key="^" line="110" column="36" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" timestamp="1514003572732">
        <mark key="'" line="105" column="11" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/layouts/app.blade.php" timestamp="1509132542046">
        <mark key="'" line="16" column="5" />
        <mark key="[" line="49" column="75" />
        <mark key="]" line="49" column="75" />
        <mark key="." line="49" column="75" />
        <mark key="^" line="49" column="74" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_175358_add_name_to_authors_table.php" timestamp="1511200457428">
        <mark key="[" line="16" column="39" />
        <mark key="]" line="16" column="39" />
        <mark key="." line="16" column="39" />
        <mark key="^" line="16" column="39" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" timestamp="1514000461215">
        <mark key="'" line="107" column="25" />
        <mark key="[" line="125" column="78" />
        <mark key="]" line="125" column="78" />
        <mark key="." line="125" column="78" />
        <mark key="^" line="125" column="69" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/schedule-detail.php" timestamp="1505245831929">
        <mark key="'" line="48" column="0" />
        <mark key="[" line="73" column="0" />
        <mark key="]" line="73" column="0" />
        <mark key="^" line="35" column="28" />
        <mark key="." line="73" column="0" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/app/Classes/Funding.php" timestamp="1512793808602">
        <mark key="'" line="17" column="10" />
        <mark key="[" line="17" column="31" />
        <mark key="]" line="17" column="30" />
        <mark key="^" line="17" column="30" />
        <mark key="." line="17" column="30" />
      </file>
      <file name="$USER_HOME$/developements/math/resources/assets/js/app.js" timestamp="1513496441493">
        <mark key="[" line="8" column="35" />
        <mark key="]" line="9" column="43" />
        <mark key="^" line="9" column="43" />
        <mark key="." line="9" column="43" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Middleware/CheckTeacher.php" timestamp="1509127843415">
        <mark key="[" line="19" column="66" />
        <mark key="]" line="19" column="70" />
        <mark key="^" line="19" column="70" />
        <mark key="." line="19" column="70" />
      </file>
      <file name="$USER_HOME$/developements/math/app/Transaction.php" timestamp="1513497373624">
        <mark key="[" line="21" column="7" />
        <mark key="]" line="21" column="45" />
        <mark key="^" line="21" column="45" />
        <mark key="." line="21" column="45" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/User.php" timestamp="1509284584999">
        <mark key="[" line="126" column="38" />
        <mark key="]" line="126" column="38" />
        <mark key="." line="126" column="38" />
        <mark key="^" line="126" column="43" />
      </file>
      <file name="$USER_HOME$/developements/math/app/Http/Controllers/HomeController.php" timestamp="1513502409665">
        <mark key="'" line="44" column="21" />
        <mark key="[" line="51" column="58" />
        <mark key="]" line="51" column="57" />
        <mark key="." line="51" column="57" />
        <mark key="^" line="51" column="57" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/point/menu.blade.php" timestamp="1509280415457">
        <mark key="[" line="13" column="20" />
        <mark key="]" line="13" column="20" />
        <mark key="." line="13" column="20" />
        <mark key="^" line="12" column="23" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/index.php" timestamp="1513999141384">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Console/Kernel.php" timestamp="1511621599570">
        <mark key="[" line="31" column="23" />
        <mark key="]" line="31" column="24" />
        <mark key="^" line="31" column="24" />
        <mark key="." line="31" column="24" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/seeds/AcademyTableSeeder.php" timestamp="1509126054513">
        <mark key="[" line="13" column="37" />
        <mark key="]" line="13" column="37" />
        <mark key="." line="13" column="37" />
        <mark key="^" line="13" column="58" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/ClassRoomController.php" timestamp="1509136625671">
        <mark key="[" line="18" column="42" />
        <mark key="]" line="21" column="0" />
        <mark key="^" line="18" column="9" />
        <mark key="." line="21" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/resources/views/errors/notice.blade.php" timestamp="1512810392650">
        <mark key="[" line="9" column="6" />
        <mark key="]" line="9" column="6" />
        <mark key="^" line="9" column="6" />
        <mark key="." line="9" column="6" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/factories/ArticleFactory.php" timestamp="1511203383953">
        <mark key="[" line="4" column="30" />
        <mark key="]" line="4" column="34" />
        <mark key="." line="4" column="34" />
        <mark key="^" line="4" column="34" />
      </file>
      <file name="$USER_HOME$/developements/math/database/seeds/DatabaseSeeder.php" timestamp="1513500427966">
        <mark key="[" line="13" column="46" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_14_034355_add_columns_to_users_table.php" timestamp="1509124725266">
        <mark key="[" line="17" column="43" />
        <mark key="]" line="17" column="42" />
        <mark key="^" line="17" column="42" />
        <mark key="." line="17" column="42" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/includes/deposit-list.php" timestamp="1512759174093">
        <mark key="[" line="10" column="12" />
        <mark key="]" line="10" column="17" />
        <mark key="^" line="10" column="17" />
        <mark key="." line="10" column="17" />
      </file>
      <file name="$USER_HOME$/developements/git/point/config/app.php" timestamp="1508518167282">
        <mark key="'" line="201" column="0" />
        <mark key="[" line="187" column="74" />
        <mark key="]" line="189" column="0" />
        <mark key="." line="189" column="0" />
        <mark key="^" line="189" column="0" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/dashboard.php" timestamp="1505246376942">
        <mark key="'" line="142" column="32" />
        <mark key="[" line="142" column="34" />
        <mark key="]" line="142" column="34" />
        <mark key="." line="142" column="34" />
        <mark key="^" line="142" column="34" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Http/Requests/ArticleRequest.php" timestamp="1511457470147">
        <mark key="'" line="43" column="9" />
        <mark key="[" line="44" column="9" />
        <mark key="]" line="44" column="9" />
        <mark key="." line="44" column="9" />
        <mark key="^" line="44" column="9" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/api.json" timestamp="1513883399676">
        <mark key="[" line="0" column="7976" />
        <mark key="]" line="0" column="7975" />
        <mark key="." line="0" column="7975" />
        <mark key="^" line="0" column="7975" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Tag.php" timestamp="1511202584283">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="7" column="1" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
        <mark key="^" line="15" column="0" />
      </file>
      <file name="$USER_HOME$/developements/p2p/composer.json" timestamp="1513440008406">
        <mark key="[" line="14" column="20" />
        <mark key="]" line="16" column="45" />
        <mark key="." line="16" column="45" />
        <mark key="^" line="16" column="45" />
      </file>
      <file name="$USER_HOME$/developements/math/resources/assets/sass/app.scss" timestamp="1513496484057">
        <mark key="[" line="13" column="30" />
        <mark key="]" line="13" column="31" />
        <mark key="^" line="13" column="31" />
        <mark key="." line="13" column="31" />
      </file>
      <file name="$USER_HOME$/developements/math/database/seeds/PointsTableSeeder.php" timestamp="1513499907912">
        <mark key="'" line="26" column="18" />
        <mark key="[" line="60" column="27" />
        <mark key="]" line="60" column="27" />
        <mark key="." line="60" column="27" />
        <mark key="^" line="60" column="27" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/layouts/app-example.blade.php" timestamp="1508434561859">
        <mark key="'" line="258" column="53" />
        <mark key="[" line="12" column="16" />
        <mark key="]" line="12" column="38" />
        <mark key="." line="12" column="38" />
        <mark key="^" line="12" column="38" />
      </file>
      <file name="$USER_HOME$/developements/math/database/migrations/2017_12_16_053449_create_points_table.php" timestamp="1513419709199">
        <mark key="[" line="20" column="0" />
        <mark key="]" line="21" column="33" />
        <mark key="^" line="21" column="33" />
        <mark key="." line="21" column="33" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/t-funding-detail.php" timestamp="1512565515138">
        <mark key="[" line="2" column="26" />
        <mark key="]" line="2" column="26" />
        <mark key="^" line="12" column="20" />
        <mark key="." line="2" column="26" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/js/components/fundRaising.vue" timestamp="1512567362393">
        <mark key="'" line="51" column="134" />
        <mark key="[" line="44" column="78" />
        <mark key="]" line="44" column="82" />
        <mark key="." line="44" column="82" />
        <mark key="^" line="44" column="82" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/style.css" timestamp="1512761554034">
        <mark key="[" line="520" column="23" />
        <mark key="]" line="520" column="23" />
        <mark key="^" line="520" column="39" />
        <mark key="." line="520" column="23" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/resources/views/book/create.blade.php" timestamp="1511555259872">
        <mark key="[" line="5" column="48" />
        <mark key="]" line="5" column="49" />
        <mark key="." line="5" column="49" />
        <mark key="^" line="5" column="32" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Kernel.php" timestamp="1509127891797">
        <mark key="[" line="60" column="52" />
        <mark key="]" line="60" column="58" />
        <mark key="^" line="60" column="58" />
        <mark key="." line="60" column="58" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/dashboard.php" timestamp="1512513764361">
        <mark key="'" line="122" column="4" />
        <mark key="[" line="60" column="30" />
        <mark key="]" line="60" column="41" />
        <mark key="." line="60" column="41" />
        <mark key="^" line="60" column="41" />
      </file>
      <file name="$USER_HOME$/developements/math/database/seeds/TransactionsTableSeeder.php" timestamp="1513501744773">
        <mark key="[" line="31" column="62" />
        <mark key="]" line="13" column="6" />
        <mark key="." line="13" column="6" />
        <mark key="^" line="13" column="6" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/funding-list.php" timestamp="1505245506350">
        <mark key="'" line="45" column="16" />
        <mark key="[" line="1" column="0" />
        <mark key="]" line="1" column="0" />
        <mark key="." line="1" column="0" />
        <mark key="^" line="56" column="51" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Notifications/SlackNotification.php" timestamp="1511609474204">
        <mark key="'" line="12" column="0" />
        <mark key="[" line="61" column="23" />
        <mark key="]" line="62" column="26" />
        <mark key="^" line="62" column="26" />
        <mark key="." line="62" column="26" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/public/js/jquery.js" timestamp="1514003973878">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="11025" column="3" />
        <mark key="^" line="11025" column="3" />
        <mark key="." line="11025" column="3" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/InvitationFactory.php" timestamp="1509126482076">
        <mark key="[" line="5" column="0" />
        <mark key="]" line="7" column="65" />
        <mark key="." line="7" column="55" />
        <mark key="^" line="7" column="55" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/User.php" timestamp="1511549432904">
        <mark key="'" line="23" column="5" />
        <mark key="[" line="32" column="26" />
        <mark key="]" line="32" column="44" />
        <mark key="." line="32" column="44" />
        <mark key="^" line="32" column="44" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/fundingDetail1.php" timestamp="1512567762381">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="^" line="13" column="3" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/includes/deposit-list.php" timestamp="1505059737250">
        <mark key="'" line="48" column="9" />
        <mark key="[" line="40" column="27" />
        <mark key="]" line="40" column="27" />
        <mark key="." line="40" column="27" />
        <mark key="^" line="12" column="51" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/app/Classes/User.php" timestamp="1505244239236">
        <mark key="'" line="17" column="20" />
        <mark key="[" line="229" column="133" />
        <mark key="]" line="229" column="133" />
        <mark key="." line="229" column="133" />
        <mark key="^" line="229" column="170" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_25_021400_create_invitations_table.php" timestamp="1509124270957">
        <mark key="[" line="22" column="74" />
        <mark key="]" line="22" column="74" />
        <mark key="." line="22" column="74" />
        <mark key="^" line="22" column="74" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/database/migrations/2017_11_24_145221_create_books_table.php" timestamp="1511554413766">
        <mark key="[" line="22" column="33" />
        <mark key="]" line="23" column="33" />
        <mark key="." line="23" column="33" />
        <mark key="^" line="23" column="33" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/helpers.php" timestamp="1512838014263">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/Seoul/api/routes.php" timestamp="1505646959921">
        <mark key="'" line="67" column="12" />
        <mark key="[" line="67" column="12" />
        <mark key="]" line="71" column="6" />
        <mark key="." line="26" column="23" />
        <mark key="^" line="26" column="23" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" timestamp="1514000981911">
        <mark key="[" line="135" column="87" />
        <mark key="]" line="135" column="87" />
        <mark key="." line="135" column="87" />
        <mark key="^" line="135" column="87" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_175205_create_authors_table.php" timestamp="1511200388876">
        <mark key="[" line="18" column="20" />
        <mark key="]" line="18" column="25" />
        <mark key="^" line="18" column="25" />
        <mark key="." line="18" column="25" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/ProductFactory.php" timestamp="1509132065353">
        <mark key="[" line="5" column="17" />
        <mark key="]" line="5" column="28" />
        <mark key="." line="5" column="28" />
        <mark key="^" line="5" column="28" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/class/students.blade.php" timestamp="1509277837133">
        <mark key="'" line="8" column="23" />
        <mark key="[" line="20" column="41" />
        <mark key="]" line="20" column="41" />
        <mark key="^" line="20" column="41" />
        <mark key="." line="20" column="41" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/DashboardStudentController.php" timestamp="1509284493007">
        <mark key="'" line="33" column="35" />
        <mark key="[" line="19" column="12" />
        <mark key="]" line="20" column="13" />
        <mark key="." line="20" column="13" />
        <mark key="^" line="20" column="13" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/resources/views/home.blade.php" timestamp="1511555284028">
        <mark key="'" line="52" column="39" />
        <mark key="[" line="5" column="48" />
        <mark key="]" line="5" column="49" />
        <mark key="." line="5" column="49" />
        <mark key="^" line="5" column="50" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/PointTransactionFactory.php" timestamp="1509278643756">
        <mark key="[" line="22" column="9" />
        <mark key="]" line="22" column="14" />
        <mark key="." line="22" column="14" />
        <mark key="^" line="22" column="14" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" timestamp="1514005586258">
        <mark key="[" line="559" column="109" />
        <mark key="]" line="559" column="109" />
        <mark key="^" line="526" column="21" />
        <mark key="." line="559" column="109" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/seeds/UsersTablesSeeder.php" timestamp="1511202778021">
        <mark key="[" line="14" column="31" />
        <mark key="]" line="14" column="31" />
        <mark key="." line="14" column="31" />
        <mark key="^" line="14" column="31" />
      </file>
      <file name="$USER_HOME$/developements/p2p/resources/views/p2p.list.blade.php" timestamp="1513443253663">
        <mark key="[" line="8" column="58" />
        <mark key="]" line="8" column="58" />
        <mark key="." line="8" column="58" />
        <mark key="^" line="8" column="52" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/ClassRoom.php" timestamp="1509817057726">
        <mark key="'" line="26" column="0" />
        <mark key="[" line="93" column="35" />
        <mark key="]" line="93" column="33" />
        <mark key="^" line="93" column="33" />
        <mark key="." line="93" column="33" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/seeds/DatabaseSeeder.php" timestamp="1511203287460">
        <mark key="[" line="12" column="5" />
        <mark key="]" line="14" column="47" />
        <mark key="." line="14" column="47" />
        <mark key="^" line="14" column="47" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/partials/footer/class/students.blade.php" timestamp="1509135797888">
        <mark key="[" line="1" column="91" />
        <mark key="]" line="1" column="97" />
        <mark key="." line="1" column="97" />
        <mark key="^" line="1" column="97" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_181625_create_tags_table.php" timestamp="1511201833915">
        <mark key="[" line="16" column="37" />
      </file>
      <file name="$USER_HOME$/developements/p2p/app/Http/Controllers/ContentController.php" timestamp="1513452100359">
        <mark key="'" line="135" column="0" />
        <mark key="[" line="32" column="18" />
        <mark key="]" line="32" column="18" />
        <mark key="^" line="32" column="17" />
        <mark key="." line="32" column="18" />
      </file>
      <file name="$USER_HOME$/developements/math/routes/web.php" timestamp="1513418006788">
        <mark key="'" line="47" column="19" />
        <mark key="[" line="47" column="27" />
        <mark key="]" line="49" column="6" />
        <mark key="." line="49" column="6" />
        <mark key="^" line="49" column="6" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_23_235523_create_point_transactions_table.php" timestamp="1513403909444">
        <mark key="[" line="30" column="0" />
        <mark key="]" line="32" column="65" />
        <mark key="." line="27" column="34" />
        <mark key="^" line="27" column="34" />
      </file>
      <file name="$USER_HOME$/developements/p2p/app/Company.php" timestamp="1513448840821">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="28" />
        <mark key="^" line="12" column="3" />
        <mark key="." line="12" column="3" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Product.php" timestamp="1509279686597">
        <mark key="'" line="33" column="0" />
        <mark key="[" line="30" column="5" />
        <mark key="]" line="30" column="5" />
        <mark key="^" line="30" column="5" />
        <mark key="." line="30" column="5" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/resources/assets/sass/app.scss" timestamp="1511555445455">
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="4" />
        <mark key="^" line="11" column="4" />
        <mark key="." line="11" column="4" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Http/Controllers/BooksController.php" timestamp="1511544391161">
        <mark key="[" line="7" column="10" />
        <mark key="]" line="7" column="10" />
        <mark key="." line="7" column="10" />
        <mark key="^" line="17" column="34" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Academy.php" timestamp="1508439710611">
        <mark key="'" line="19" column="6" />
        <mark key="[" line="8" column="1" />
        <mark key="]" line="17" column="0" />
        <mark key="^" line="17" column="0" />
        <mark key="." line="17" column="0" />
      </file>
      <file name="$USER_HOME$/developements/p2p/.gitignore" timestamp="1513452214718">
        <mark key="[" line="11" column="4" />
        <mark key="]" line="14" column="14" />
        <mark key="^" line="14" column="14" />
        <mark key="." line="14" column="14" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/seeds/ProductsTableSeeder.php" timestamp="1509160598611">
        <mark key="[" line="13" column="55" />
        <mark key="]" line="13" column="55" />
        <mark key="." line="13" column="55" />
        <mark key="^" line="13" column="55" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Books.php" timestamp="1511544245173">
        <mark key="[" line="9" column="28" />
        <mark key="]" line="10" column="3" />
        <mark key="." line="10" column="3" />
        <mark key="^" line="10" column="3" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Http/Controllers/ArticlesController.php" timestamp="1512810589020">
        <mark key="'" line="57" column="28" />
        <mark key="[" line="71" column="5" />
        <mark key="]" line="72" column="25" />
        <mark key="." line="72" column="25" />
        <mark key="^" line="72" column="25" />
      </file>
      <file name="$USER_HOME$/developements/p2p/resources/assets/sass/app.scss" timestamp="1513451605114">
        <mark key="[" line="8" column="55" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Providers/RouteServiceProvider.php" timestamp="1508435686932">
        <mark key="'" line="1" column="0" />
        <mark key="[" line="67" column="0" />
        <mark key="]" line="67" column="0" />
        <mark key="^" line="71" column="48" />
        <mark key="." line="67" column="0" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Middleware/CheckUserType.php" timestamp="1509127764314">
        <mark key="[" line="7" column="11" />
        <mark key="]" line="7" column="17" />
        <mark key="." line="7" column="17" />
        <mark key="^" line="7" column="17" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/class.blade.php" timestamp="1509137856903">
        <mark key="'" line="123" column="78" />
        <mark key="[" line="139" column="0" />
        <mark key="]" line="139" column="0" />
        <mark key="." line="139" column="0" />
        <mark key="^" line="148" column="19" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/auth/register.blade.php" timestamp="1508441789783">
        <mark key="'" line="253" column="44" />
        <mark key="[" line="25" column="30" />
        <mark key="]" line="26" column="58" />
        <mark key="^" line="26" column="58" />
        <mark key="." line="26" column="58" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsld/wp-content/themes/Avada-Child-Theme/schedule.php" timestamp="1512762143446">
        <mark key="'" line="22" column="23" />
        <mark key="[" line="11" column="0" />
        <mark key="]" line="11" column="32" />
        <mark key="." line="11" column="0" />
        <mark key="^" line="10" column="0" />
      </file>
      <file name="$USER_HOME$/developements/p2p/.env" timestamp="1513451519444">
        <mark key="'" line="19" column="0" />
        <mark key="[" line="0" column="16" />
        <mark key="]" line="3" column="14" />
        <mark key="^" line="3" column="14" />
        <mark key="." line="3" column="14" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Http/Controllers/StudentController.php" timestamp="1508867131116">
        <mark key="'" line="30" column="6" />
        <mark key="[" line="22" column="0" />
        <mark key="]" line="27" column="10" />
        <mark key="." line="23" column="51" />
        <mark key="^" line="25" column="30" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/point/create.blade.php" timestamp="1509281830152">
        <mark key="[" line="4" column="26" />
        <mark key="]" line="4" column="12" />
        <mark key="." line="4" column="12" />
        <mark key="^" line="9" column="40" />
      </file>
      <file name="$USER_HOME$/developements/math/database/migrations/2017_04_11_000000_alter_post_nullable_fields_table.php" timestamp="1513500646631">
        <mark key="[" line="32" column="5" />
        <mark key="]" line="15" column="14" />
        <mark key="^" line="15" column="14" />
        <mark key="." line="15" column="14" />
      </file>
      <file name="$USER_HOME$/developements/git/point/config/services.php" timestamp="1508861866154">
        <mark key="'" line="15" column="0" />
        <mark key="[" line="39" column="32" />
        <mark key="]" line="39" column="39" />
        <mark key="^" line="39" column="39" />
        <mark key="." line="39" column="39" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Book.php" timestamp="1511554404791">
        <mark key="[" line="7" column="0" />
        <mark key="]" line="7" column="0" />
        <mark key="^" line="10" column="0" />
        <mark key="." line="7" column="0" />
      </file>
      <file name="$USER_HOME$/developements/p2p/database/migrations/2017_12_16_162528_create_contents_table.php" timestamp="1513450144747">
        <mark key="[" line="22" column="46" />
        <mark key="]" line="22" column="47" />
        <mark key="." line="22" column="47" />
        <mark key="^" line="22" column="47" />
      </file>
      <file name="$USER_HOME$/developements/math/database/migrations/2016_01_01_000000_create_pages_table.php" timestamp="1513500657285">
        <mark key="'" line="23" column="24" />
        <mark key="[" line="38" column="5" />
        <mark key="]" line="15" column="14" />
        <mark key="^" line="15" column="14" />
        <mark key="." line="15" column="14" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" timestamp="1514000083571">
        <mark key="'" line="334" column="32" />
        <mark key="[" line="264" column="20" />
        <mark key="]" line="264" column="20" />
        <mark key="^" line="264" column="20" />
        <mark key="." line="264" column="20" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/js/app.js" timestamp="1514003723620">
        <mark key="'" line="49" column="0" />
        <mark key="[" line="21" column="7" />
        <mark key="]" line="22" column="12" />
        <mark key="." line="22" column="12" />
        <mark key="^" line="22" column="12" />
      </file>
      <file name="$USER_HOME$/developements/math/app/Point.php" timestamp="1513497547631">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
        <mark key="^" line="12" column="30" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/test_funding-detail.php" timestamp="1512564297400">
        <mark key="'" line="507" column="6" />
        <mark key="[" line="2" column="18" />
        <mark key="]" line="2" column="20" />
        <mark key="." line="2" column="20" />
        <mark key="^" line="2" column="20" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/database/migrations/2017_11_20_175539_create_articles_table.php" timestamp="1511201491440">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="41" />
        <mark key="^" line="30" column="6" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/auth/login.blade.php" timestamp="1508865093081">
        <mark key="[" line="65" column="50" />
        <mark key="]" line="65" column="51" />
        <mark key="^" line="65" column="51" />
        <mark key="." line="65" column="51" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/User.php" timestamp="1511460009789">
        <mark key="'" line="2" column="0" />
        <mark key="[" line="20" column="19" />
        <mark key="]" line="20" column="19" />
        <mark key="^" line="22" column="5" />
        <mark key="." line="20" column="19" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/seeds/UsersTableSeeder.php" timestamp="1509137396579">
        <mark key="[" line="20" column="38" />
        <mark key="]" line="20" column="38" />
        <mark key="." line="20" column="38" />
        <mark key="^" line="20" column="38" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/.env" timestamp="1511609876523">
        <mark key="'" line="12" column="0" />
        <mark key="[" line="33" column="18" />
        <mark key="]" line="37" column="95" />
        <mark key="^" line="37" column="95" />
        <mark key="." line="37" column="95" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/style.css" timestamp="1505246093292">
        <mark key="'" line="480" column="0" />
        <mark key="[" line="477" column="34" />
        <mark key="]" line="478" column="19" />
        <mark key="." line="478" column="19" />
        <mark key="^" line="478" column="19" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/functions.php" timestamp="1514003744093">
        <mark key="'" line="17" column="25" />
        <mark key="[" line="17" column="91" />
        <mark key="]" line="17" column="91" />
        <mark key="." line="17" column="91" />
        <mark key="^" line="18" column="122" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Http/Controllers/DocsController.php" timestamp="1512909570005">
        <mark key="[" line="49" column="48" />
        <mark key="]" line="38" column="32" />
        <mark key="." line="38" column="32" />
        <mark key="^" line="38" column="32" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Documentation.php" timestamp="1512909023819">
        <mark key="'" line="28" column="38" />
        <mark key="[" line="41" column="0" />
        <mark key="]" line="32" column="4" />
        <mark key="." line="32" column="4" />
        <mark key="^" line="32" column="4" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/taxinfo_111.php" timestamp="1512564346117">
        <mark key="[" line="2" column="25" />
        <mark key="]" line="2" column="29" />
        <mark key="^" line="2" column="29" />
        <mark key="." line="2" column="29" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/Point.php" timestamp="1509280122637">
        <mark key="'" line="16" column="27" />
        <mark key="[" line="62" column="5" />
        <mark key="]" line="54" column="89" />
        <mark key="." line="54" column="89" />
        <mark key="^" line="54" column="89" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/PostFactory.php" timestamp="1508514679730">
        <mark key="[" line="10" column="9" />
        <mark key="]" line="10" column="9" />
        <mark key="." line="10" column="9" />
        <mark key="^" line="10" column="9" />
      </file>
      <file name="$USER_HOME$/developements/math/config/voyager.php" timestamp="1513494648392">
        <mark key="'" line="26" column="0" />
        <mark key="[" line="199" column="24" />
        <mark key="]" line="199" column="30" />
        <mark key="." line="199" column="30" />
        <mark key="^" line="199" column="30" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/point/item.blade.php" timestamp="1509280582712">
        <mark key="[" line="13" column="26" />
        <mark key="]" line="13" column="30" />
        <mark key="." line="13" column="30" />
        <mark key="^" line="13" column="30" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada/header.php" timestamp="1512296513500">
        <mark key="[" line="97" column="43" />
        <mark key="]" line="97" column="43" />
        <mark key="." line="97" column="43" />
        <mark key="^" line="97" column="43" />
      </file>
      <file name="/Dummy.txt" timestamp="1514003490645">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/developements/study/identify/app/Http/Controllers/BookController.php" timestamp="1511609666523">
        <mark key="'" line="70" column="0" />
        <mark key="[" line="46" column="19" />
        <mark key="]" line="46" column="19" />
        <mark key="." line="46" column="19" />
        <mark key="^" line="72" column="26" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/Seoul/seoul/wp-config.php" timestamp="1504422190086">
        <mark key="'" line="44" column="3" />
        <mark key="[" line="19" column="43" />
        <mark key="]" line="19" column="49" />
        <mark key="^" line="19" column="53" />
        <mark key="." line="19" column="50" />
      </file>
      <file name="$USER_HOME$/developements/git/point/routes/api.php" timestamp="1508517825056">
        <mark key="[" line="17" column="3" />
        <mark key="]" line="18" column="0" />
        <mark key="." line="18" column="0" />
        <mark key="^" line="18" column="0" />
      </file>
      <file name="$USER_HOME$/developements/math/database/migrations/2016_01_01_000000_create_posts_table.php" timestamp="1513500676948">
        <mark key="[" line="42" column="5" />
        <mark key="]" line="14" column="14" />
        <mark key="^" line="14" column="14" />
        <mark key="." line="14" column="14" />
      </file>
      <file name="$USER_HOME$/developements/p2p/routes/web.php" timestamp="1513451718440">
        <mark key="[" line="44" column="6" />
        <mark key="]" line="44" column="6" />
        <mark key="." line="44" column="6" />
        <mark key="^" line="44" column="6" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/seeds/InvitationsTableSeeder.php" timestamp="1509130067673">
        <mark key="[" line="14" column="35" />
        <mark key="]" line="14" column="35" />
        <mark key="." line="14" column="35" />
        <mark key="^" line="14" column="61" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/js/components/fundRaising.vue" timestamp="1505037896703">
        <mark key="'" line="20" column="0" />
        <mark key="[" line="128" column="19" />
        <mark key="]" line="128" column="30" />
        <mark key="." line="128" column="30" />
        <mark key="^" line="128" column="30" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/app/Events/ArticlesEvent.php" timestamp="1511458984660">
        <mark key="[" line="29" column="5" />
        <mark key="]" line="30" column="3" />
        <mark key="^" line="30" column="3" />
        <mark key="." line="30" column="3" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/assets/bank.csv" timestamp="1505241374574">
        <mark key="'" line="82" column="3" />
        <mark key="[" line="99" column="4" />
        <mark key="]" line="99" column="3" />
        <mark key="." line="99" column="3" />
        <mark key="^" line="99" column="3" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/migrations/2017_10_27_214022_create_class_room_user_table.php" timestamp="1509134040400">
        <mark key="[" line="25" column="0" />
        <mark key="]" line="26" column="26" />
        <mark key="^" line="26" column="26" />
        <mark key="." line="26" column="26" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/newSNSL/wp-content/themes/Avada-Child-Theme/taxinfo.php" timestamp="1505242498078">
        <mark key="'" line="26" column="15" />
        <mark key="[" line="34" column="0" />
        <mark key="]" line="34" column="0" />
        <mark key="." line="34" column="0" />
        <mark key="^" line="9" column="32" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/UserFactory.php" timestamp="1509125607878">
        <mark key="[" line="36" column="27" />
        <mark key="]" line="36" column="27" />
        <mark key="." line="36" column="27" />
        <mark key="^" line="36" column="27" />
      </file>
      <file name="$USER_HOME$/developements/git/point/app/ClassRoomUser.php" timestamp="1509137734880">
        <mark key="[" line="16" column="5" />
        <mark key="]" line="17" column="24" />
        <mark key="^" line="17" column="24" />
        <mark key="." line="17" column="24" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail-test.php" timestamp="1512565890948">
        <mark key="[" line="2" column="18" />
        <mark key="]" line="2" column="25" />
        <mark key="^" line="2" column="25" />
        <mark key="." line="2" column="25" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/ClassRoomFactory.php" timestamp="1509161385052">
        <mark key="[" line="19" column="34" />
        <mark key="]" line="19" column="79" />
        <mark key="." line="19" column="79" />
        <mark key="^" line="19" column="79" />
      </file>
      <file name="$USER_HOME$/developements/math/.env" timestamp="1513420264503">
        <mark key="'" line="14" column="17" />
        <mark key="[" line="5" column="24" />
        <mark key="]" line="5" column="24" />
        <mark key="^" line="5" column="24" />
        <mark key="." line="5" column="24" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/AcademyFactory.php" timestamp="1509125853573">
        <mark key="[" line="4" column="17" />
        <mark key="]" line="4" column="28" />
        <mark key="." line="4" column="28" />
        <mark key="^" line="4" column="28" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/teacher/dashboard.blade.php" timestamp="1509136185300">
        <mark key="'" line="18" column="15" />
        <mark key="[" line="4" column="24" />
        <mark key="]" line="4" column="25" />
        <mark key="^" line="4" column="25" />
        <mark key="." line="4" column="25" />
      </file>
      <file name="$USER_HOME$/developements/git/point/resources/views/student.blade.php" timestamp="1508867065384">
        <mark key="'" line="85" column="27" />
        <mark key="[" line="119" column="20" />
        <mark key="]" line="119" column="20" />
        <mark key="." line="119" column="20" />
        <mark key="^" line="109" column="95" />
      </file>
      <file name="$USER_HOME$/developements/git/point/database/factories/ClassRoomUserFactory.php" timestamp="1509125459412">
        <mark key="[" line="11" column="47" />
        <mark key="]" line="12" column="3" />
        <mark key="." line="12" column="3" />
        <mark key="^" line="12" column="3" />
      </file>
      <file name="$USER_HOME$/developements/study/myapp/resources/views/docs/show.blade.php" timestamp="1512838362277">
        <mark key="[" line="20" column="10" />
        <mark key="]" line="16" column="31" />
        <mark key="." line="16" column="31" />
        <mark key="^" line="16" column="31" />
      </file>
      <file name="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail-1.php" timestamp="1512566011906">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="^" line="1" column="32" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/developements/p2p/resources/views/company-list.blade.php" timestamp="1513451831617">
        <mark key="'" line="0" column="23" />
        <mark key="[" line="35" column="110" />
        <mark key="]" line="35" column="110" />
        <mark key="^" line="35" column="116" />
        <mark key="." line="35" column="110" />
      </file>
    </filemarks>
    <jumps>
      <jump line="80" column="0" filename="$USER_HOME$/developements/math/resources/views/home.blade.php" />
      <jump line="16" column="0" filename="$USER_HOME$/developements/math/resources/views/layouts/app.blade.php" />
      <jump line="83" column="0" filename="$USER_HOME$/developements/math/resources/views/layouts/app.blade.php" />
      <jump line="42" column="21" filename="$USER_HOME$/developements/math/app/Http/Controllers/HomeController.php" />
      <jump line="49" column="34" filename="$USER_HOME$/developements/math/resources/views/home.blade.php" />
      <jump line="7" column="0" filename="$USER_HOME$/developements/math/resources/views/home.blade.php" />
      <jump line="26" column="18" filename="$USER_HOME$/developements/math/database/seeds/PointsTableSeeder.php" />
      <jump line="22" column="24" filename="$USER_HOME$/developements/math/database/migrations/2016_01_01_000000_create_pages_table.php" />
      <jump line="21" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="485" column="36" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="28" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="29" column="5680" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="156" column="3" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="155" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="172" column="14" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="158" column="44" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="4" column="1" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="13" column="22" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="14" column="23" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="157" column="22" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="174" column="11" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="171" column="11" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="187" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="170" column="32" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="21" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="32" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="399" column="13" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="134" column="29" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="135" column="28" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="136" column="24" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="137" column="26" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="138" column="26" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="139" column="25" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="140" column="24" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="141" column="21" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="142" column="27" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule-detail.php" />
      <jump line="210" column="8" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="277" column="22" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="282" column="23" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="305" column="32" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="314" column="32" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="334" column="32" filename="$USER_HOME$/PhpstormProjects/snsl/app/Classes/User.php" />
      <jump line="0" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/index.php" />
      <jump line="106" column="18" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="123" column="15" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="285" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/helper.php" />
      <jump line="11" column="32" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="133" column="19" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="80" column="30" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="107" column="25" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/schedule.php" />
      <jump line="30" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="579" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="707" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="721" column="12" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="323" column="94" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="328" column="48" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="329" column="52" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="330" column="56" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="331" column="60" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="332" column="102" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="336" column="63" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="338" column="60" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="341" column="60" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="342" column="112" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="346" column="57" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="347" column="53" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="348" column="49" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="379" column="44" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="423" column="72" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="527" column="16" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="528" column="20" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="529" column="24" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="530" column="66" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="232" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="34" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/functions.php" />
      <jump line="24" column="25" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/functions.php" />
      <jump line="19" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/js/app.js" />
      <jump line="8" column="15" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/js/app.js" />
      <jump line="121" column="3" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="99" column="11" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="110" column="23" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="27" column="36" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="72" column="10" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="83" column="11" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="86" column="10" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="89" column="5" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="95" column="10" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="96" column="12" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="105" column="11" filename="$USER_HOME$/PhpstormProjects/snsl/node_modules/jquery/package.json" />
      <jump line="49" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/js/app.js" />
      <jump line="10245" column="41" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/public/js/jquery.js" />
      <jump line="5841" column="12" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/public/js/jquery.js" />
      <jump line="1" column="0" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/public/js/jquery.js" />
      <jump line="526" column="31" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="535" column="69" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="544" column="31" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="574" column="16" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="589" column="43" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="581" column="40" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
      <jump line="577" column="20" filename="$USER_HOME$/PhpstormProjects/snsl/wp-content/themes/Avada-Child-Theme/funding-detail.php" />
    </jumps>
    <registers>
      <register name="a" type="4">
        <keys>
          <key char="37" code="0" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="118" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="65535" code="8" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="61" code="0" mods="0" />
          <key char="62" code="0" mods="0" />
          <key char="32" code="0" mods="0" />
          <key char="36" code="0" mods="0" />
          <key char="100" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="116" code="0" mods="0" />
          <key char="97" code="0" mods="0" />
          <key char="91" code="0" mods="0" />
          <key char="39" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="94" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="118" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="121" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="101" code="0" mods="0" />
          <key char="98" code="0" mods="0" />
          <key char="108" code="0" mods="0" />
          <key char="112" code="0" mods="0" />
          <key char="65" code="0" mods="0" />
          <key char="44" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
        </keys>
      </register>
      <register name="&quot;" type="4">
        <text>.</text>
      </register>
      <register name="j" type="4">
        <keys>
          <key char="106" code="0" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="65535" code="27" mods="0" />
          <key char="107" code="0" mods="0" />
          <key char="107" code="0" mods="0" />
        </keys>
      </register>
      <register name="-" type="4">
        <text>.</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxzY2hlZHVsZVw+</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">Ly8gICAgd3BfZW5xdWV1ZV9zY3JpcHQoJ2Jvb3RzdHJhcC1zY3JpcHQnLCAnaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvdHdpdHRlci1ib290c3RyYXAvMy4zLjcvanMvYm9vdHN0cmFwLm1pbi5qcycsIFtdLCAnMS4wLjAnLCB0cnVlKTsK</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICAgICAgICAgICQoJyNzY2hlZHVsZScpLmF0dHIoJ2lkJywgJ3NjaGVkdWxlMScpOwo=</text>
      </register>
      <register name="q" type="4">
        <text />
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgICAgICAgICAgJCgnI3NjaGVkdWxlJykuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">PGRpdiBjbGFzcz0ibW9kYWwgZmFkZSIgaWQ9IiI+Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ZnVuY3Rpb24gc2Nzc19lbnF1ZXVlX2N1c3RvbSgpCnsKICAgIHdwX2VucXVldWVfc3R5bGUoJ3Njc3Mtc3R5bGUnLCBnZXRfc3R5bGVzaGVldF9kaXJlY3RvcnlfdXJpKCkgLiAnL3B1YmxpYy9jc3MvYXBwLmNzcycpOwogICAgd3BfZW5xdWV1ZV9zY3JpcHQoJ2FwcC1zY3JpcHQnLCBnZXRfc3R5bGVzaGVldF9kaXJlY3RvcnlfdXJpKCkgLiAnL3B1YmxpYy9qcy9hcHAuanMnLCBbXSwgJzEuMC4yJywgdHJ1ZSk7Cn0KCmFkZF9hY3Rpb24oJ3dwX2VucXVldWVfc2NyaXB0cycsICdzY3NzX2VucXVldWVfY3VzdG9tJyk7Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgICQubm9Db25mbGljdCgpOwo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgICAgICB2YXIgYnNNb2RhbCA9ICQuZm4ubW9kYWwubm9Db25mbGljdCgpOwo=</text>
      </register>
      <register name=":" type="4">
        <text>157</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxzY2hlZHVsZVw+</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxzY2hlZHVsZVw+</last-pattern>
      <last-replace>~</last-replace>
      <last-substitute>function dd</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDxtZW51XD4=</entry>
        <entry>user-table</entry>
        <entry>order</entry>
        <entry>sort</entry>
        <entry>상환스케</entry>
        <entry>투자금액을</entry>
        <entry>dd</entry>
        <entry>function dd</entry>
        <entry encoding="base64">XDxXSElURV9MSVNUXD4=</entry>
        <entry>api.j</entry>
        <entry>=</entry>
        <entry>investment</entry>
        <entry encoding="base64">XDxBUElfU0NIRURVTEVfREVUQUlMX05BTUVcPg==</entry>
        <entry>480</entry>
        <entry>거치기간</entry>
        <entry>modal</entry>
        <entry>jquery</entry>
        <entry>js</entry>
        <entry>min</entry>
        <entry encoding="base64">XDxzY2hlZHVsZVw+</entry>
      </history-search>
      <history-cmd>
        <entry>524</entry>
        <entry>26</entry>
        <entry>vs</entry>
        <entry>q</entry>
        <entry>106</entry>
        <entry>w</entry>
        <entry>193</entry>
        <entry>51</entry>
        <entry>351</entry>
        <entry>103</entry>
        <entry>90</entry>
        <entry>39</entry>
        <entry>57</entry>
        <entry>28</entry>
        <entry>260</entry>
        <entry>119</entry>
        <entry encoding="base64">JzwsJz5ub3JtIGkj</entry>
        <entry>453</entry>
        <entry>150</entry>
        <entry>157</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
    </shortcut-conflicts>
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
</application>